[
  {
    "name": "DataGridComponent#checkValidity",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 405,
        "line": "  /**\r"
      },
      {
        "lineNumber": 406,
        "line": "   * Checks the validity of this datagrid.\r"
      },
      {
        "lineNumber": 407,
        "line": "   *\r"
      },
      {
        "lineNumber": 408,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 409,
        "line": "   * @param dirty\r"
      },
      {
        "lineNumber": 410,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 411,
        "line": "   */\r"
      },
      {
        "lineNumber": 412,
        "line": "  checkValidity(data, dirty, row, silentCheck) {\r"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "row",
      "silentCheck"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "SelectComponent#addOption",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 206,
        "line": "  /**\r"
      },
      {
        "lineNumber": 207,
        "line": "   * Adds an option to the select dropdown.\r"
      },
      {
        "lineNumber": 208,
        "line": "   *\r"
      },
      {
        "lineNumber": 209,
        "line": "   * @param value\r"
      },
      {
        "lineNumber": 210,
        "line": "   * @param label\r"
      },
      {
        "lineNumber": 211,
        "line": "   */\r"
      },
      {
        "lineNumber": 212,
        "line": "  addOption(value, label, attrs = {}, id) {\r"
      }
    ],
    "codeParams": [
      "value",
      "label",
      "attrs",
      "id"
    ],
    "docParams": [
      "value",
      "label"
    ]
  },
  {
    "name": "SelectComponent#addCurrentChoices",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 1024,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1025,
        "line": "   * @param {*} value\r"
      },
      {
        "lineNumber": 1026,
        "line": "   * @param {Array} items\r"
      },
      {
        "lineNumber": 1027,
        "line": "   */\r"
      },
      {
        "lineNumber": 1028,
        "line": "  addCurrentChoices(values, items, keyValue) {\r"
      }
    ],
    "codeParams": [
      "values",
      "items",
      "keyValue"
    ],
    "docParams": [
      "value",
      "items"
    ]
  },
  {
    "name": "TextAreaComponent#updateEditorValue",
    "filePath": "src/components/textarea/TextArea.js",
    "lines": [
      {
        "lineNumber": 85,
        "line": "  /**\r"
      },
      {
        "lineNumber": 86,
        "line": "   * Updates the editor value.\r"
      },
      {
        "lineNumber": 87,
        "line": "   *\r"
      },
      {
        "lineNumber": 88,
        "line": "   * @param newValue\r"
      },
      {
        "lineNumber": 89,
        "line": "   */\r"
      },
      {
        "lineNumber": 90,
        "line": "  updateEditorValue(index, newValue) {\r"
      }
    ],
    "codeParams": [
      "index",
      "newValue"
    ],
    "docParams": [
      "newValue"
    ]
  },
  {
    "name": "Component#getModifiedSchema",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 654,
        "line": "  /**\r"
      },
      {
        "lineNumber": 655,
        "line": "   * Returns only the schema that is different from the default.\r"
      },
      {
        "lineNumber": 656,
        "line": "   *\r"
      },
      {
        "lineNumber": 657,
        "line": "   * @param schema\r"
      },
      {
        "lineNumber": 658,
        "line": "   * @param defaultSchema\r"
      },
      {
        "lineNumber": 659,
        "line": "   */\r"
      },
      {
        "lineNumber": 660,
        "line": "  getModifiedSchema(schema, defaultSchema, recursion) {\r"
      }
    ],
    "codeParams": [
      "schema",
      "defaultSchema",
      "recursion"
    ],
    "docParams": [
      "schema",
      "defaultSchema"
    ]
  },
  {
    "name": "Component#t",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 699,
        "line": "  /**\r"
      },
      {
        "lineNumber": 700,
        "line": "   * Translate a text using the i18n system.\r"
      },
      {
        "lineNumber": 701,
        "line": "   *\r"
      },
      {
        "lineNumber": 702,
        "line": "   * @param {string} text - The i18n identifier.\r"
      },
      {
        "lineNumber": 703,
        "line": "   * @param {Object} params - The i18n parameters to use for translation.\r"
      },
      {
        "lineNumber": 704,
        "line": "   */\r"
      },
      {
        "lineNumber": 705,
        "line": "  t(text, params = {}, ...args) {\r"
      }
    ],
    "codeParams": [
      "text",
      "params",
      "args"
    ],
    "docParams": [
      "text",
      "params"
    ]
  },
  {
    "name": "Component#sanitize",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 836,
        "line": "  /**\r"
      },
      {
        "lineNumber": 837,
        "line": "   * Sanitize an html string.\r"
      },
      {
        "lineNumber": 838,
        "line": "   *\r"
      },
      {
        "lineNumber": 839,
        "line": "   * @param string\r"
      },
      {
        "lineNumber": 840,
        "line": "   * @returns {*}\r"
      },
      {
        "lineNumber": 841,
        "line": "   */\r"
      },
      {
        "lineNumber": 842,
        "line": "  sanitize(dirty) {\r"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "Component#renderString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 846,
        "line": "  /**\r"
      },
      {
        "lineNumber": 847,
        "line": "   * Render a template string into html.\r"
      },
      {
        "lineNumber": 848,
        "line": "   *\r"
      },
      {
        "lineNumber": 849,
        "line": "   * @param template\r"
      },
      {
        "lineNumber": 850,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 851,
        "line": "   * @param actions\r"
      },
      {
        "lineNumber": 852,
        "line": "   *\r"
      },
      {
        "lineNumber": 853,
        "line": "   * @return {HTMLElement} - The created element.\r"
      },
      {
        "lineNumber": 854,
        "line": "   */\r"
      },
      {
        "lineNumber": 855,
        "line": "  renderString(template, data) {\r"
      }
    ],
    "codeParams": [
      "template",
      "data"
    ],
    "docParams": [
      "template",
      "data",
      "actions"
    ]
  },
  {
    "name": "Component#getWidgetValueAsString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1174,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1175,
        "line": "   * Uses the widget to determine the output string.\r"
      },
      {
        "lineNumber": 1176,
        "line": "   *\r"
      },
      {
        "lineNumber": 1177,
        "line": "   * @param value\r"
      },
      {
        "lineNumber": 1178,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 1179,
        "line": "   */\r"
      },
      {
        "lineNumber": 1180,
        "line": "  getWidgetValueAsString(value, options) {\r"
      }
    ],
    "codeParams": [
      "value",
      "options"
    ],
    "docParams": [
      "value"
    ]
  },
  {
    "name": "Component#conditionallyVisible",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1508,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1509,
        "line": "   * Check if this component is conditionally visible.\r"
      },
      {
        "lineNumber": 1510,
        "line": "   *\r"
      },
      {
        "lineNumber": 1511,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 1512,
        "line": "   * @return {boolean}\r"
      },
      {
        "lineNumber": 1513,
        "line": "   */\r"
      },
      {
        "lineNumber": 1514,
        "line": "  conditionallyVisible(data, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#checkConditions",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1565,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1566,
        "line": "   * Checks conditions for this component and any sub components.\r"
      },
      {
        "lineNumber": 1567,
        "line": "   * @param args\r"
      },
      {
        "lineNumber": 1568,
        "line": "   * @return {boolean}\r"
      },
      {
        "lineNumber": 1569,
        "line": "   */\r"
      },
      {
        "lineNumber": 1570,
        "line": "  checkConditions(data, flags, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#fieldLogic",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1581,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1582,
        "line": "   * Check all triggers and apply necessary actions.\r"
      },
      {
        "lineNumber": 1583,
        "line": "   *\r"
      },
      {
        "lineNumber": 1584,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 1585,
        "line": "   */\r"
      },
      {
        "lineNumber": 1586,
        "line": "  fieldLogic(data, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#addMessages",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1728,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1729,
        "line": "   * Add a new input error to this element.\r"
      },
      {
        "lineNumber": 1730,
        "line": "   *\r"
      },
      {
        "lineNumber": 1731,
        "line": "   * @param message\r"
      },
      {
        "lineNumber": 1732,
        "line": "   * @param dirty\r"
      },
      {
        "lineNumber": 1733,
        "line": "   */\r"
      },
      {
        "lineNumber": 1734,
        "line": "  addMessages(messages) {\r"
      }
    ],
    "codeParams": [
      "messages"
    ],
    "docParams": [
      "message",
      "dirty"
    ]
  },
  {
    "name": "Component#setValueAt",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2203,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2204,
        "line": "   * Set the value at a specific index.\r"
      },
      {
        "lineNumber": 2205,
        "line": "   *\r"
      },
      {
        "lineNumber": 2206,
        "line": "   * @param index\r"
      },
      {
        "lineNumber": 2207,
        "line": "   * @param value\r"
      },
      {
        "lineNumber": 2208,
        "line": "   */\r"
      },
      {
        "lineNumber": 2209,
        "line": "  setValueAt(index, value, flags = {}) {\r"
      }
    ],
    "codeParams": [
      "index",
      "value",
      "flags"
    ],
    "docParams": [
      "index",
      "value"
    ]
  },
  {
    "name": "Component#updateComponentValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2265,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2266,
        "line": "   * Update a value of this component.\r"
      },
      {
        "lineNumber": 2267,
        "line": "   *\r"
      },
      {
        "lineNumber": 2268,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 2269,
        "line": "   */\r"
      },
      {
        "lineNumber": 2270,
        "line": "  updateComponentValue(value, flags = {}) {\r"
      }
    ],
    "codeParams": [
      "value",
      "flags"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "Component#updateOnChange",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2338,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2339,
        "line": "   * Update the value on change.\r"
      },
      {
        "lineNumber": 2340,
        "line": "   *\r"
      },
      {
        "lineNumber": 2341,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 2342,
        "line": "   */\r"
      },
      {
        "lineNumber": 2343,
        "line": "  updateOnChange(flags = {}, changed = false) {\r"
      }
    ],
    "codeParams": [
      "flags",
      "changed"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "Component#convertNumberOrBoolToString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2351,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2352,
        "line": "   * Perform a calculated value operation.\r"
      },
      {
        "lineNumber": 2353,
        "line": "   *\r"
      },
      {
        "lineNumber": 2354,
        "line": "   * @param data - The global data object.\r"
      },
      {
        "lineNumber": 2355,
        "line": "   *\r"
      },
      {
        "lineNumber": 2356,
        "line": "   * @return {boolean} - If the value changed during calculation.\r"
      },
      {
        "lineNumber": 2357,
        "line": "   */\r"
      },
      {
        "lineNumber": 2358,
        "line": "\r"
      },
      {
        "lineNumber": 2359,
        "line": "  convertNumberOrBoolToString(value) {\r"
      }
    ],
    "codeParams": [
      "value"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#calculateValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2446,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2447,
        "line": "   * Performs calculations in this component plus any child components.\r"
      },
      {
        "lineNumber": 2448,
        "line": "   *\r"
      },
      {
        "lineNumber": 2449,
        "line": "   * @param args\r"
      },
      {
        "lineNumber": 2450,
        "line": "   * @return {boolean}\r"
      },
      {
        "lineNumber": 2451,
        "line": "   */\r"
      },
      {
        "lineNumber": 2452,
        "line": "  calculateValue(data, flags, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#invalidMessage",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2487,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2488,
        "line": "   * Returns the invalid message, or empty string if the component is valid.\r"
      },
      {
        "lineNumber": 2489,
        "line": "   *\r"
      },
      {
        "lineNumber": 2490,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 2491,
        "line": "   * @param dirty\r"
      },
      {
        "lineNumber": 2492,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 2493,
        "line": "   */\r"
      },
      {
        "lineNumber": 2494,
        "line": "  invalidMessage(data, dirty, ignoreCondition, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "ignoreCondition",
      "row"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "Component#checkComponentValidity",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2534,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2535,
        "line": "   * Checks the validity of this component and sets the error message if it is invalid.\r"
      },
      {
        "lineNumber": 2536,
        "line": "   *\r"
      },
      {
        "lineNumber": 2537,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 2538,
        "line": "   * @param dirty\r"
      },
      {
        "lineNumber": 2539,
        "line": "   * @param row\r"
      },
      {
        "lineNumber": 2540,
        "line": "   * @return {boolean}\r"
      },
      {
        "lineNumber": 2541,
        "line": "   */\r"
      },
      {
        "lineNumber": 2542,
        "line": "  checkComponentValidity(data, dirty, row, options = {}) {\r"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "row",
      "options"
    ],
    "docParams": [
      "data",
      "dirty",
      "row"
    ]
  },
  {
    "name": "Component#checkData",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2568,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2569,
        "line": "   * Check the conditions, calculations, and validity of a single component and triggers an update if\r"
      },
      {
        "lineNumber": 2570,
        "line": "   * something changed.\r"
      },
      {
        "lineNumber": 2571,
        "line": "   *\r"
      },
      {
        "lineNumber": 2572,
        "line": "   * @param data - The root data of the change event.\r"
      },
      {
        "lineNumber": 2573,
        "line": "   * @param flags - The flags from this change event.\r"
      },
      {
        "lineNumber": 2574,
        "line": "   *\r"
      },
      {
        "lineNumber": 2575,
        "line": "   * @return boolean - If component is valid or not.\r"
      },
      {
        "lineNumber": 2576,
        "line": "   */\r"
      },
      {
        "lineNumber": 2577,
        "line": "  checkData(data, flags, row) {\r"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "data",
      "flags"
    ]
  },
  {
    "name": "NestedComponent#everyComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "  /**\r"
      },
      {
        "lineNumber": 142,
        "line": "   * Perform a deep iteration over every component, including those\r"
      },
      {
        "lineNumber": 143,
        "line": "   * within other container based components.\r"
      },
      {
        "lineNumber": 144,
        "line": "   *\r"
      },
      {
        "lineNumber": 145,
        "line": "   * @param {function} fn - Called for every component.\r"
      },
      {
        "lineNumber": 146,
        "line": "   */\r"
      },
      {
        "lineNumber": 147,
        "line": "  everyComponent(fn, options) {\r"
      }
    ],
    "codeParams": [
      "fn",
      "options"
    ],
    "docParams": [
      "fn"
    ]
  },
  {
    "name": "NestedComponent#getComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 198,
        "line": "  /**\r"
      },
      {
        "lineNumber": 199,
        "line": "   * Returns a component provided a key. This performs a deep search within the\r"
      },
      {
        "lineNumber": 200,
        "line": "   * component tree.\r"
      },
      {
        "lineNumber": 201,
        "line": "   *\r"
      },
      {
        "lineNumber": 202,
        "line": "   * @param {string} key - The key of the component to retrieve.\r"
      },
      {
        "lineNumber": 203,
        "line": "   * @param {function} fn - Called with the component once found.\r"
      },
      {
        "lineNumber": 204,
        "line": "   * @return {Object} - The component that is located.\r"
      },
      {
        "lineNumber": 205,
        "line": "   */\r"
      },
      {
        "lineNumber": 206,
        "line": "  getComponent(path, fn, originalPath) {\r"
      }
    ],
    "codeParams": [
      "path",
      "fn",
      "originalPath"
    ],
    "docParams": [
      "key",
      "fn"
    ]
  },
  {
    "name": "NestedComponent#createComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 284,
        "line": "  /**\r"
      },
      {
        "lineNumber": 285,
        "line": "   * Create a new component and add it to the components array.\r"
      },
      {
        "lineNumber": 286,
        "line": "   *\r"
      },
      {
        "lineNumber": 287,
        "line": "   * @param component\r"
      },
      {
        "lineNumber": 288,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 289,
        "line": "   */\r"
      },
      {
        "lineNumber": 290,
        "line": "  createComponent(component, options, data, before) {\r"
      }
    ],
    "codeParams": [
      "component",
      "options",
      "data",
      "before"
    ],
    "docParams": [
      "component",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponents",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 351,
        "line": "  /**\r"
      },
      {
        "lineNumber": 352,
        "line": "   *\r"
      },
      {
        "lineNumber": 353,
        "line": "   * @param element\r"
      },
      {
        "lineNumber": 354,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 355,
        "line": "   */\r"
      },
      {
        "lineNumber": 356,
        "line": "  addComponents(data, options) {\r"
      }
    ],
    "codeParams": [
      "data",
      "options"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 368,
        "line": "  /**\r"
      },
      {
        "lineNumber": 369,
        "line": "   * Add a new component to the components array.\r"
      },
      {
        "lineNumber": 370,
        "line": "   *\r"
      },
      {
        "lineNumber": 371,
        "line": "   * @param {Object} component - The component JSON schema to add.\r"
      },
      {
        "lineNumber": 372,
        "line": "   * @param {Object} data - The submission data object to house the data for this component.\r"
      },
      {
        "lineNumber": 373,
        "line": "   * @param {HTMLElement} before - A DOM element to insert this element before.\r"
      },
      {
        "lineNumber": 374,
        "line": "   * @return {Component} - The created component instance.\r"
      },
      {
        "lineNumber": 375,
        "line": "   */\r"
      },
      {
        "lineNumber": 376,
        "line": "  addComponent(component, data, before, noAdd) {\r"
      }
    ],
    "codeParams": [
      "component",
      "data",
      "before",
      "noAdd"
    ],
    "docParams": [
      "component",
      "data",
      "before"
    ]
  },
  {
    "name": "Form#sanitize",
    "filePath": "src/Form.js",
    "lines": [
      {
        "lineNumber": 223,
        "line": "  /**\r"
      },
      {
        "lineNumber": 224,
        "line": "   * Sanitize an html string.\r"
      },
      {
        "lineNumber": 225,
        "line": "   *\r"
      },
      {
        "lineNumber": 226,
        "line": "   * @param string\r"
      },
      {
        "lineNumber": 227,
        "line": "   * @returns {*}\r"
      },
      {
        "lineNumber": 228,
        "line": "   */\r"
      },
      {
        "lineNumber": 229,
        "line": "  sanitize(dirty) {\r"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "checkInvalidDate",
    "filePath": "src/utils/calendarUtils.js",
    "lines": [
      {
        "lineNumber": 71,
        "line": "/**\r"
      },
      {
        "lineNumber": 72,
        "line": " * Checks the entered date for validity.\r"
      },
      {
        "lineNumber": 73,
        "line": " *\r"
      },
      {
        "lineNumber": 74,
        "line": " * @param {String} value\r"
      },
      {
        "lineNumber": 75,
        "line": " *   The value to check.\r"
      },
      {
        "lineNumber": 76,
        "line": " * @param {[String]} format\r"
      },
      {
        "lineNumber": 77,
        "line": " *   A moment formats.\r"
      },
      {
        "lineNumber": 78,
        "line": " * @param {Date} maxDate\r"
      },
      {
        "lineNumber": 79,
        "line": " *   The max date.\r"
      },
      {
        "lineNumber": 80,
        "line": " * @param {Date} minDate\r"
      },
      {
        "lineNumber": 81,
        "line": " *   The min date.\r"
      },
      {
        "lineNumber": 82,
        "line": " * * @return {{message: string, result: boolean}}\r"
      },
      {
        "lineNumber": 83,
        "line": " */\r"
      },
      {
        "lineNumber": 84,
        "line": "export function checkInvalidDate(value, format, minDate, maxDate) {\r"
      }
    ],
    "codeParams": [
      "value",
      "format",
      "minDate",
      "maxDate"
    ],
    "docParams": [
      "value",
      "format",
      "maxDate",
      "minDate"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "/**\r"
      },
      {
        "lineNumber": 142,
        "line": " * Get a component by its key\r"
      },
      {
        "lineNumber": 143,
        "line": " *\r"
      },
      {
        "lineNumber": 144,
        "line": " * @param {Object} components\r"
      },
      {
        "lineNumber": 145,
        "line": " *   The components to iterate.\r"
      },
      {
        "lineNumber": 146,
        "line": " * @param {String|Object} key\r"
      },
      {
        "lineNumber": 147,
        "line": " *   The key of the component to get, or a query of the component to search.\r"
      },
      {
        "lineNumber": 148,
        "line": " *\r"
      },
      {
        "lineNumber": 149,
        "line": " * @returns {Object}\r"
      },
      {
        "lineNumber": 150,
        "line": " *   The component that matches the given key, or undefined if not found.\r"
      },
      {
        "lineNumber": 151,
        "line": " */\r"
      },
      {
        "lineNumber": 152,
        "line": "export function getComponent(components, key, includeAll) {\r"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "findComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 192,
        "line": "/**\r"
      },
      {
        "lineNumber": 193,
        "line": " * This function will find a component in a form and return the component AND THE PATH to the component in the form.\r"
      },
      {
        "lineNumber": 194,
        "line": " * Path to the component is stored as an array of nested components and their indexes.The Path is being filled recursively\r"
      },
      {
        "lineNumber": 195,
        "line": " * when you iterating through the nested structure.\r"
      },
      {
        "lineNumber": 196,
        "line": " * If the component is not found the callback won't be called and function won't return anything.\r"
      },
      {
        "lineNumber": 197,
        "line": " *\r"
      },
      {
        "lineNumber": 198,
        "line": " * @param components\r"
      },
      {
        "lineNumber": 199,
        "line": " * @param key\r"
      },
      {
        "lineNumber": 200,
        "line": " * @param fn\r"
      },
      {
        "lineNumber": 201,
        "line": " * @param path\r"
      },
      {
        "lineNumber": 202,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 203,
        "line": " */\r"
      },
      {
        "lineNumber": 204,
        "line": "export function findComponent(components, key, path, fn) {\r"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "path",
      "fn"
    ],
    "docParams": [
      "components",
      "key",
      "fn",
      "path"
    ]
  },
  {
    "name": "evaluate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 39,
        "line": "/**\r"
      },
      {
        "lineNumber": 40,
        "line": " * Evaluate a method.\r"
      },
      {
        "lineNumber": 41,
        "line": " *\r"
      },
      {
        "lineNumber": 42,
        "line": " * @param func\r"
      },
      {
        "lineNumber": 43,
        "line": " * @param args\r"
      },
      {
        "lineNumber": 44,
        "line": " * @return {*}\r"
      },
      {
        "lineNumber": 45,
        "line": " */\r"
      },
      {
        "lineNumber": 46,
        "line": "export function evaluate(func, args, ret, tokenize) {\r"
      }
    ],
    "codeParams": [
      "func",
      "args",
      "ret",
      "tokenize"
    ],
    "docParams": [
      "func",
      "args"
    ]
  },
  {
    "name": "checkCalculated",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 170,
        "line": "/**\r"
      },
      {
        "lineNumber": 171,
        "line": " * Checks the calculated value for a provided component and data.\r"
      },
      {
        "lineNumber": 172,
        "line": " *\r"
      },
      {
        "lineNumber": 173,
        "line": " * @param {Object} component\r"
      },
      {
        "lineNumber": 174,
        "line": " *   The component to check for the calculated value.\r"
      },
      {
        "lineNumber": 175,
        "line": " * @param {Object} submission\r"
      },
      {
        "lineNumber": 176,
        "line": " *   A submission object.\r"
      },
      {
        "lineNumber": 177,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 178,
        "line": " *   The full submission data.\r"
      },
      {
        "lineNumber": 179,
        "line": " */\r"
      },
      {
        "lineNumber": 180,
        "line": "export function checkCalculated(component, submission, rowData) {\r"
      }
    ],
    "codeParams": [
      "component",
      "submission",
      "rowData"
    ],
    "docParams": [
      "component",
      "submission",
      "data"
    ]
  },
  {
    "name": "checkSimpleConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 193,
        "line": "/**\r"
      },
      {
        "lineNumber": 194,
        "line": " * Check if a simple conditional evaluates to true.\r"
      },
      {
        "lineNumber": 195,
        "line": " *\r"
      },
      {
        "lineNumber": 196,
        "line": " * @param condition\r"
      },
      {
        "lineNumber": 197,
        "line": " * @param condition\r"
      },
      {
        "lineNumber": 198,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 199,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 200,
        "line": " * @returns {boolean}\r"
      },
      {
        "lineNumber": 201,
        "line": " */\r"
      },
      {
        "lineNumber": 202,
        "line": "export function checkSimpleConditional(component, condition, row, data) {\r"
      }
    ],
    "codeParams": [
      "component",
      "condition",
      "row",
      "data"
    ],
    "docParams": [
      "condition",
      "condition",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCustomConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 230,
        "line": "/**\r"
      },
      {
        "lineNumber": 231,
        "line": " * Check custom javascript conditional.\r"
      },
      {
        "lineNumber": 232,
        "line": " *\r"
      },
      {
        "lineNumber": 233,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 1028,
        "line": "  addCurrentChoices(values, items, keyValue) {"
      }
    ],
    "codeParams": [
      "values",
      "items",
      "keyValue"
    ],
    "docParams": [
      "value",
      "items"
    ]
  },
  {
    "name": "TextAreaComponent#updateEditorValue",
    "filePath": "src/components/textarea/TextArea.js",
    "lines": [
      {
        "lineNumber": 87,
        "line": "  /**"
      },
      {
        "lineNumber": 88,
        "line": "   * Updates the editor value."
      },
      {
        "lineNumber": 89,
        "line": "   *"
      },
      {
        "lineNumber": 90,
        "line": "   * @param newValue"
      },
      {
        "lineNumber": 91,
        "line": "   */"
      },
      {
        "lineNumber": 92,
        "line": "  updateEditorValue(index, newValue) {"
      }
    ],
    "codeParams": [
      "component",
      "custom",
      "row",
      "data",
      "form",
      "variable",
      "onError",
      "instance"
    ],
    "docParams": [
      "component",
      "custom",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCondition",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 267,
        "line": "/**\r"
      },
      {
        "lineNumber": 268,
        "line": " * Checks the conditions for a provided component and data.\r"
      },
      {
        "lineNumber": 269,
        "line": " *\r"
      },
      {
        "lineNumber": 270,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 271,
        "line": " *   The component to check for the condition.\r"
      },
      {
        "lineNumber": 272,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 273,
        "line": " *   The data within a row\r"
      },
      {
        "lineNumber": 274,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 275,
        "line": " *   The full submission data.\r"
      },
      {
        "lineNumber": 276,
        "line": " *\r"
      },
      {
        "lineNumber": 277,
        "line": " * @returns {boolean}\r"
      },
      {
        "lineNumber": 278,
        "line": " */\r"
      },
      {
        "lineNumber": 279,
        "line": "export function checkCondition(component, row, data, form, instance) {\r"
      }
    ],
    "codeParams": [
      "component",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "row",
      "data"
    ]
  },
  {
    "name": "checkTrigger",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 294,
        "line": "/**\r"
      },
      {
        "lineNumber": 295,
        "line": " * Test a trigger on a component.\r"
      },
      {
        "lineNumber": 296,
        "line": " *\r"
      },
      {
        "lineNumber": 297,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 298,
        "line": " * @param action\r"
      },
      {
        "lineNumber": 299,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 300,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 301,
        "line": " * @returns {mixed}\r"
      },
      {
        "lineNumber": 302,
        "line": " */\r"
      },
      {
        "lineNumber": 303,
        "line": "export function checkTrigger(component, trigger, row, data, form, instance) {\r"
      }
    ],
    "codeParams": [
      "component",
      "trigger",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "action",
      "data",
      "row"
    ]
  },
  {
    "name": "delay",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 907,
        "line": "/**\r"
      },
      {
        "lineNumber": 908,
        "line": " * Delays function execution with possibility to execute function synchronously or cancel it.\r"
      },
      {
        "lineNumber": 909,
        "line": " *\r"
      },
      {
        "lineNumber": 910,
        "line": " * @param fn Function to delay\r"
      },
      {
        "lineNumber": 911,
        "line": " * @param delay Delay time\r"
      },
      {
        "lineNumber": 912,
        "line": " * @return {*}\r"
      },
      {
        "lineNumber": 913,
        "line": " */\r"
      },
      {
        "lineNumber": 914,
        "line": "export function delay(fn, delay = 0, ...args) {\r"
      }
    ],
    "codeParams": [
      "fn",
      "delay",
      "args"
    ],
    "docParams": [
      "fn",
      "delay"
    ]
  },
  {
    "name": "unfold",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 981,
        "line": "/**\r"
      },
      {
        "lineNumber": 982,
        "line": " * Retrun provided argument.\r"
      },
      {
        "lineNumber": 983,
        "line": " * If argument is a function, returns the result of a function call.\r"
      },
      {
        "lineNumber": 984,
        "line": " * @param {*} e;\r"
      },
      {
        "lineNumber": 985,
        "line": " *\r"
      },
      {
        "lineNumber": 986,
        "line": " * @return {*}\r"
      },
      {
        "lineNumber": 987,
        "line": " */\r"
      },
      {
        "lineNumber": 988,
        "line": "export function unfold(e) {\r"
      }
    ],
    "codeParams": [
      "e"
    ],
    "docParams": [
      "e;"
    ]
  },
  {
    "name": "sanitize",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 1071,
        "line": "/**\r"
      },
      {
        "lineNumber": 1072,
        "line": " * Sanitize an html string.\r"
      },
      {
        "lineNumber": 1073,
        "line": " *\r"
      },
      {
        "lineNumber": 1074,
        "line": " * @param string\r"
      },
      {
        "lineNumber": 1075,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 1076,
        "line": " */\r"
      },
      {
        "lineNumber": 1077,
        "line": "export function sanitize(string, options) {\r"
      }
    ],
    "codeParams": [
      "string",
      "options"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "ValidationChecker#checkValidations",
    "filePath": "src/validator/Validator.js",
    "lines": [
      {
        "lineNumber": 938,
        "line": "  /**\r"
      },
      {
        "lineNumber": 939,
        "line": "   * Use the new validations engine to evaluate any errors.\r"
      },
      {
        "lineNumber": 940,
        "line": "   *\r"
      },
      {
        "lineNumber": 941,
        "line": "   * @param component\r"
      },
      {
        "lineNumber": 942,
        "line": "   * @param validations\r"
      },
      {
        "lineNumber": 943,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 944,
        "line": "   * @param row\r"
      },
      {
        "lineNumber": 945,
        "line": "   * @param values\r"
      },
      {
        "lineNumber": 946,
        "line": "   * @returns {any[]}\r"
      },
      {
        "lineNumber": 947,
        "line": "   */\r"
      },
      {
        "lineNumber": 948,
        "line": "  checkValidations(component, validations, data, row, values, async) {\r"
      }
    ],
    "codeParams": [
      "component",
      "validations",
      "data",
      "row",
      "values",
      "async"
    ],
    "docParams": [
      "component",
      "validations",
      "data",
      "row",
      "values"
    ]
  },
  {
    "name": "Webform#setForm",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 601,
        "line": "  /**\r"
      },
      {
        "lineNumber": 602,
        "line": "   * Sets the JSON schema for the form to be rendered.\r"
      },
      {
        "lineNumber": 603,
        "line": "   *\r"
      },
      {
        "lineNumber": 604,
        "line": "   * @example\r"
      },
      {
        "lineNumber": 605,
        "line": "   * import Webform from 'formiojs/Webform';\r"
      },
      {
        "lineNumber": 606,
        "line": "   * let form = new Webform(document.getElementById('formio'));\r"
      },
      {
        "lineNumber": 607,
        "line": "   * form.setForm({\r"
      },
      {
        "lineNumber": 608,
        "line": "   *   components: [\r"
      },
      {
        "lineNumber": 609,
        "line": "   *     {\r"
      },
      {
        "lineNumber": 610,
        "line": "   *       type: 'textfield',\r"
      },
      {
        "lineNumber": 611,
        "line": "   *       key: 'firstName',\r"
      },
      {
        "lineNumber": 612,
        "line": "   *       label: 'First Name',\r"
      },
      {
        "lineNumber": 613,
        "line": "   *       placeholder: 'Enter your first name.',\r"
      },
      {
        "lineNumber": 614,
        "line": "   *       input: true\r"
      },
      {
        "lineNumber": 615,
        "line": "   *     },\r"
      },
      {
        "lineNumber": 616,
        "line": "   *     {\r"
      },
      {
        "lineNumber": 617,
        "line": "   *       type: 'textfield',\r"
      },
      {
        "lineNumber": 618,
        "line": "   *       key: 'lastName',\r"
      },
      {
        "lineNumber": 619,
        "line": "   *       label: 'Last Name',\r"
      },
      {
        "lineNumber": 620,
        "line": "   *       placeholder: 'Enter your last name',\r"
      },
      {
        "lineNumber": 621,
        "line": "   *       input: true\r"
      },
      {
        "lineNumber": 622,
        "line": "   *     },\r"
      },
      {
        "lineNumber": 623,
        "line": "   *     {\r"
      },
      {
        "lineNumber": 624,
        "line": "   *       type: 'button',\r"
      },
      {
        "lineNumber": 625,
        "line": "   *       action: 'submit',\r"
      },
      {
        "lineNumber": 626,
        "line": "   *       label: 'Submit',\r"
      },
      {
        "lineNumber": 627,
        "line": "   *       theme: 'primary'\r"
      },
      {
        "lineNumber": 628,
        "line": "   *     }\r"
      },
      {
        "lineNumber": 629,
        "line": "   *   ]\r"
      },
      {
        "lineNumber": 630,
        "line": "   * });\r"
      },
      {
        "lineNumber": 631,
        "line": "   *\r"
      },
      {
        "lineNumber": 632,
        "line": "   * @param {Object} form - The JSON schema of the form @see https://examples.form.io/example for an example JSON schema.\r"
      },
      {
        "lineNumber": 633,
        "line": "   * @returns {*}\r"
      },
      {
        "lineNumber": 634,
        "line": "   */\r"
      },
      {
        "lineNumber": 635,
        "line": "  setForm(form, flags) {\r"
      }
    ],
    "codeParams": [
      "form",
      "flags"
    ],
    "docParams": [
      "form"
    ]
  },
  {
    "name": "Webform#restoreDraft",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 800,
        "line": "  /**\r"
      },
      {
        "lineNumber": 801,
        "line": "   * Restores a draft submission based on the user who is authenticated.\r"
      },
      {
        "lineNumber": 802,
        "line": "   *\r"
      },
      {
        "lineNumber": 803,
        "line": "   * @param {userId} - The user id where we need to restore the draft from.\r"
      },
      {
        "lineNumber": 804,
        "line": "   */\r"
      },
      {
        "lineNumber": 805,
        "line": "  restoreDraft(userId) {\r"
      }
    ],
    "codeParams": [
      "userId"
    ],
    "docParams": [
      "-"
    ]
  },
  {
    "name": "Webform#showErrors",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1122,
        "line": "  /* eslint-disable no-unused-vars */\r"
      },
      {
        "lineNumber": 1123,
        "line": "  showErrors(error, triggerEvent, onChange) {\r"
      }
    ],
    "codeParams": [
      "error",
      "triggerEvent",
      "onChange"
    ],
    "docParams": [
      "error"
    ]
  },
  {
    "name": "Webform#onChange",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1268,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1269,
        "line": "   * Trigger the change event for this form.\r"
      },
      {
        "lineNumber": 1270,
        "line": "   *\r"
      },
      {
        "lineNumber": 1271,
        "line": "   * @param changed\r"
      },
      {
        "lineNumber": 1272,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 1273,
        "line": "   */\r"
      },
      {
        "lineNumber": 1274,
        "line": "  onChange(flags, changed, modified, changes) {\r"
      }
    ],
    "codeParams": [
      "flags",
      "changed",
      "modified",
      "changes"
    ],
    "docParams": [
      "changed",
      "flags"
    ]
  },
  {
    "name": "Webform#submit",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1460,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1461,
        "line": "   * Submits the form.\r"
      },
      {
        "lineNumber": 1462,
        "line": "   *\r"
      },
      {
        "lineNumber": 1463,
        "line": "   * @example\r"
      },
      {
        "lineNumber": 1464,
        "line": "   * import Webform from 'formiojs/Webform';\r"
      },
      {
        "lineNumber": 1465,
        "line": "   * let form = new Webform(document.getElementById('formio'));\r"
      },
      {
        "lineNumber": 1466,
        "line": "   * form.src = 'https://examples.form.io/example';\r"
      },
      {
        "lineNumber": 1467,
        "line": "   * form.submission = {data: {\r"
      },
      {
        "lineNumber": 1468,
        "line": "   *   firstName: 'Joe',\r"
      },
      {
        "lineNumber": 1469,
        "line": "   *   lastName: 'Smith',\r"
      },
      {
        "lineNumber": 1470,
        "line": "   *   email: 'joe@example.com'\r"
      },
      {
        "lineNumber": 1471,
        "line": "   * }};\r"
      },
      {
        "lineNumber": 1472,
        "line": "   * form.submit().then((submission) => {\r"
      },
      {
        "lineNumber": 1473,
        "line": "   *   console.log(submission);\r"
      },
      {
        "lineNumber": 1474,
        "line": "   * });\r"
      },
      {
        "lineNumber": 1475,
        "line": "   *\r"
      },
      {
        "lineNumber": 1476,
        "line": "   * @param {boolean} before - If this submission occured from the before handlers.\r"
      },
      {
        "lineNumber": 1477,
        "line": "   *\r"
      },
      {
        "lineNumber": 1478,
        "line": "   * @returns {Promise} - A promise when the form is done submitting.\r"
      },
      {
        "lineNumber": 1479,
        "line": "   */\r"
      },
      {
        "lineNumber": 1480,
        "line": "  submit(before, options) {\r"
      }
    ],
    "codeParams": [
      "before",
      "options"
    ],
    "docParams": [
      "before"
    ]
  },
  {
    "name": "WebformBuilder#saveComponent",
    "filePath": "src/WebformBuilder.js",
    "lines": [
      {
        "lineNumber": 1028,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1029,
        "line": "   * Called when a new component is saved.\r"
      },
      {
        "lineNumber": 1030,
        "line": "   *\r"
      },
      {
        "lineNumber": 1031,
        "line": "   * @param parent\r"
      },
      {
        "lineNumber": 1032,
        "line": "   * @param component\r"
      },
      {
        "lineNumber": 1033,
        "line": "   * @return {boolean}\r"
      },
      {
        "lineNumber": 1034,
        "line": "   */\r"
      },
      {
        "lineNumber": 1035,
        "line": "  saveComponent(component, parent, isNew, original) {\r"
      }
    ],
    "codeParams": [
      "component",
      "parent",
      "isNew",
      "original"
    ],
    "docParams": [
      "parent",
      "component"
    ]
  }
]