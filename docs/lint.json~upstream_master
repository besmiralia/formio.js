[
  {
    "name": "Form#sanitize",
    "filePath": "src/Form.js",
    "lines": [
      {
        "lineNumber": 223,
        "line": "  /**"
      },
      {
        "lineNumber": 224,
        "line": "   * Sanitize an html string."
      },
      {
        "lineNumber": 225,
        "line": "   *"
      },
      {
        "lineNumber": 226,
        "line": "   * @param string"
      },
      {
        "lineNumber": 227,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 228,
        "line": "   */"
      },
      {
        "lineNumber": 229,
        "line": "  sanitize(dirty) {"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "Webform#setForm",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 595,
        "line": "  /**"
      },
      {
        "lineNumber": 596,
        "line": "   * Sets the JSON schema for the form to be rendered."
      },
      {
        "lineNumber": 597,
        "line": "   *"
      },
      {
        "lineNumber": 598,
        "line": "   * @example"
      },
      {
        "lineNumber": 599,
        "line": "   * import Webform from 'formiojs/Webform';"
      },
      {
        "lineNumber": 600,
        "line": "   * let form = new Webform(document.getElementById('formio'));"
      },
      {
        "lineNumber": 601,
        "line": "   * form.setForm({"
      },
      {
        "lineNumber": 602,
        "line": "   *   components: ["
      },
      {
        "lineNumber": 603,
        "line": "   *     {"
      },
      {
        "lineNumber": 604,
        "line": "   *       type: 'textfield',"
      },
      {
        "lineNumber": 605,
        "line": "   *       key: 'firstName',"
      },
      {
        "lineNumber": 606,
        "line": "   *       label: 'First Name',"
      },
      {
        "lineNumber": 607,
        "line": "   *       placeholder: 'Enter your first name.',"
      },
      {
        "lineNumber": 608,
        "line": "   *       input: true"
      },
      {
        "lineNumber": 609,
        "line": "   *     },"
      },
      {
        "lineNumber": 610,
        "line": "   *     {"
      },
      {
        "lineNumber": 611,
        "line": "   *       type: 'textfield',"
      },
      {
        "lineNumber": 612,
        "line": "   *       key: 'lastName',"
      },
      {
        "lineNumber": 613,
        "line": "   *       label: 'Last Name',"
      },
      {
        "lineNumber": 614,
        "line": "   *       placeholder: 'Enter your last name',"
      },
      {
        "lineNumber": 615,
        "line": "   *       input: true"
      },
      {
        "lineNumber": 616,
        "line": "   *     },"
      },
      {
        "lineNumber": 617,
        "line": "   *     {"
      },
      {
        "lineNumber": 618,
        "line": "   *       type: 'button',"
      },
      {
        "lineNumber": 619,
        "line": "   *       action: 'submit',"
      },
      {
        "lineNumber": 620,
        "line": "   *       label: 'Submit',"
      },
      {
        "lineNumber": 621,
        "line": "   *       theme: 'primary'"
      },
      {
        "lineNumber": 622,
        "line": "   *     }"
      },
      {
        "lineNumber": 623,
        "line": "   *   ]"
      },
      {
        "lineNumber": 624,
        "line": "   * });"
      },
      {
        "lineNumber": 625,
        "line": "   *"
      },
      {
        "lineNumber": 626,
        "line": "   * @param {Object} form - The JSON schema of the form @see https://examples.form.io/example for an example JSON schema."
      },
      {
        "lineNumber": 627,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 628,
        "line": "   */"
      },
      {
        "lineNumber": 629,
        "line": "  setForm(form, flags) {"
      }
    ],
    "codeParams": [
      "form",
      "flags"
    ],
    "docParams": [
      "form"
    ]
  },
  {
    "name": "Webform#restoreDraft",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 795,
        "line": "  /**"
      },
      {
        "lineNumber": 796,
        "line": "   * Restores a draft submission based on the user who is authenticated."
      },
      {
        "lineNumber": 797,
        "line": "   *"
      },
      {
        "lineNumber": 798,
        "line": "   * @param {userId} - The user id where we need to restore the draft from."
      },
      {
        "lineNumber": 799,
        "line": "   */"
      },
      {
        "lineNumber": 800,
        "line": "  restoreDraft(userId) {"
      }
    ],
    "codeParams": [
      "userId"
    ],
    "docParams": [
      "-"
    ]
  },
  {
    "name": "Webform#showErrors",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1108,
        "line": "  /**"
      },
      {
        "lineNumber": 1109,
        "line": "   * Show the errors of this form within the alert dialog."
      },
      {
        "lineNumber": 1110,
        "line": "   *"
      },
      {
        "lineNumber": 1111,
        "line": "   * @param {Object} error - An optional additional error to display along with the component errors."
      },
      {
        "lineNumber": 1112,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 1113,
        "line": "   */"
      },
      {
        "lineNumber": 1114,
        "line": "  showErrors(error, triggerEvent) {"
      }
    ],
    "codeParams": [
      "error",
      "triggerEvent"
    ],
    "docParams": [
      "error"
    ]
  },
  {
    "name": "Webform#onChange",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1255,
        "line": "  /**"
      },
      {
        "lineNumber": 1256,
        "line": "   * Trigger the change event for this form."
      },
      {
        "lineNumber": 1257,
        "line": "   *"
      },
      {
        "lineNumber": 1258,
        "line": "   * @param changed"
      },
      {
        "lineNumber": 1259,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 1260,
        "line": "   */"
      },
      {
        "lineNumber": 1261,
        "line": "  onChange(flags, changed, modified, changes) {"
      }
    ],
    "codeParams": [
      "flags",
      "changed",
      "modified",
      "changes"
    ],
    "docParams": [
      "changed",
      "flags"
    ]
  },
  {
    "name": "Webform#submit",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1447,
        "line": "  /**"
      },
      {
        "lineNumber": 1448,
        "line": "   * Submits the form."
      },
      {
        "lineNumber": 1449,
        "line": "   *"
      },
      {
        "lineNumber": 1450,
        "line": "   * @example"
      },
      {
        "lineNumber": 1451,
        "line": "   * import Webform from 'formiojs/Webform';"
      },
      {
        "lineNumber": 1452,
        "line": "   * let form = new Webform(document.getElementById('formio'));"
      },
      {
        "lineNumber": 1453,
        "line": "   * form.src = 'https://examples.form.io/example';"
      },
      {
        "lineNumber": 1454,
        "line": "   * form.submission = {data: {"
      },
      {
        "lineNumber": 1455,
        "line": "   *   firstName: 'Joe',"
      },
      {
        "lineNumber": 1456,
        "line": "   *   lastName: 'Smith',"
      },
      {
        "lineNumber": 1457,
        "line": "   *   email: 'joe@example.com'"
      },
      {
        "lineNumber": 1458,
        "line": "   * }};"
      },
      {
        "lineNumber": 1459,
        "line": "   * form.submit().then((submission) => {"
      },
      {
        "lineNumber": 1460,
        "line": "   *   console.log(submission);"
      },
      {
        "lineNumber": 1461,
        "line": "   * });"
      },
      {
        "lineNumber": 1462,
        "line": "   *"
      },
      {
        "lineNumber": 1463,
        "line": "   * @param {boolean} before - If this submission occured from the before handlers."
      },
      {
        "lineNumber": 1464,
        "line": "   *"
      },
      {
        "lineNumber": 1465,
        "line": "   * @returns {Promise} - A promise when the form is done submitting."
      },
      {
        "lineNumber": 1466,
        "line": "   */"
      },
      {
        "lineNumber": 1467,
        "line": "  submit(before, options) {"
      }
    ],
    "codeParams": [
      "before",
      "options"
    ],
    "docParams": [
      "before"
    ]
  },
  {
    "name": "WebformBuilder#saveComponent",
    "filePath": "src/WebformBuilder.js",
    "lines": [
      {
        "lineNumber": 1023,
        "line": "  /**"
      },
      {
        "lineNumber": 1024,
        "line": "   * Called when a new component is saved."
      },
      {
        "lineNumber": 1025,
        "line": "   *"
      },
      {
        "lineNumber": 1026,
        "line": "   * @param parent"
      },
      {
        "lineNumber": 1027,
        "line": "   * @param component"
      },
      {
        "lineNumber": 1028,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 1029,
        "line": "   */"
      },
      {
        "lineNumber": 1030,
        "line": "  saveComponent(component, parent, isNew, original) {"
      }
    ],
    "codeParams": [
      "component",
      "parent",
      "isNew",
      "original"
    ],
    "docParams": [
      "parent",
      "component"
    ]
  },
  {
    "name": "Component#getModifiedSchema",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 647,
        "line": "  /**"
      },
      {
        "lineNumber": 648,
        "line": "   * Returns only the schema that is different from the default."
      },
      {
        "lineNumber": 649,
        "line": "   *"
      },
      {
        "lineNumber": 650,
        "line": "   * @param schema"
      },
      {
        "lineNumber": 651,
        "line": "   * @param defaultSchema"
      },
      {
        "lineNumber": 652,
        "line": "   */"
      },
      {
        "lineNumber": 653,
        "line": "  getModifiedSchema(schema, defaultSchema, recursion) {"
      }
    ],
    "codeParams": [
      "schema",
      "defaultSchema",
      "recursion"
    ],
    "docParams": [
      "schema",
      "defaultSchema"
    ]
  },
  {
    "name": "Component#sanitize",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 834,
        "line": "  /**"
      },
      {
        "lineNumber": 835,
        "line": "   * Sanitize an html string."
      },
      {
        "lineNumber": 836,
        "line": "   *"
      },
      {
        "lineNumber": 837,
        "line": "   * @param string"
      },
      {
        "lineNumber": 838,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 839,
        "line": "   */"
      },
      {
        "lineNumber": 840,
        "line": "  sanitize(dirty) {"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "Component#renderString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 844,
        "line": "  /**"
      },
      {
        "lineNumber": 845,
        "line": "   * Render a template string into html."
      },
      {
        "lineNumber": 846,
        "line": "   *"
      },
      {
        "lineNumber": 847,
        "line": "   * @param template"
      },
      {
        "lineNumber": 848,
        "line": "   * @param data"
      },
      {
        "lineNumber": 849,
        "line": "   * @param actions"
      },
      {
        "lineNumber": 850,
        "line": "   *"
      },
      {
        "lineNumber": 851,
        "line": "   * @return {HTMLElement} - The created element."
      },
      {
        "lineNumber": 852,
        "line": "   */"
      },
      {
        "lineNumber": 853,
        "line": "  renderString(template, data) {"
      }
    ],
    "codeParams": [
      "template",
      "data"
    ],
    "docParams": [
      "template",
      "data",
      "actions"
    ]
  },
  {
    "name": "Component#getWidgetValueAsString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1167,
        "line": "  /**"
      },
      {
        "lineNumber": 1168,
        "line": "   * Uses the widget to determine the output string."
      },
      {
        "lineNumber": 1169,
        "line": "   *"
      },
      {
        "lineNumber": 1170,
        "line": "   * @param value"
      },
      {
        "lineNumber": 1171,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 1172,
        "line": "   */"
      },
      {
        "lineNumber": 1173,
        "line": "  getWidgetValueAsString(value, options) {"
      }
    ],
    "codeParams": [
      "value",
      "options"
    ],
    "docParams": [
      "value"
    ]
  },
  {
    "name": "Component#conditionallyVisible",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1491,
        "line": "  /**"
      },
      {
        "lineNumber": 1492,
        "line": "   * Check if this component is conditionally visible."
      },
      {
        "lineNumber": 1493,
        "line": "   *"
      },
      {
        "lineNumber": 1494,
        "line": "   * @param data"
      },
      {
        "lineNumber": 1495,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 1496,
        "line": "   */"
      },
      {
        "lineNumber": 1497,
        "line": "  conditionallyVisible(data, row) {"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#checkConditions",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1548,
        "line": "  /**"
      },
      {
        "lineNumber": 1549,
        "line": "   * Checks conditions for this component and any sub components."
      },
      {
        "lineNumber": 1550,
        "line": "   * @param args"
      },
      {
        "lineNumber": 1551,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 1552,
        "line": "   */"
      },
      {
        "lineNumber": 1553,
        "line": "  checkConditions(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#fieldLogic",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1564,
        "line": "  /**"
      },
      {
        "lineNumber": 1565,
        "line": "   * Check all triggers and apply necessary actions."
      },
      {
        "lineNumber": 1566,
        "line": "   *"
      },
      {
        "lineNumber": 1567,
        "line": "   * @param data"
      },
      {
        "lineNumber": 1568,
        "line": "   */"
      },
      {
        "lineNumber": 1569,
        "line": "  fieldLogic(data, row) {"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#addMessages",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1711,
        "line": "  /**"
      },
      {
        "lineNumber": 1712,
        "line": "   * Add a new input error to this element."
      },
      {
        "lineNumber": 1713,
        "line": "   *"
      },
      {
        "lineNumber": 1714,
        "line": "   * @param message"
      },
      {
        "lineNumber": 1715,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 1716,
        "line": "   */"
      },
      {
        "lineNumber": 1717,
        "line": "  addMessages(messages) {"
      }
    ],
    "codeParams": [
      "messages"
    ],
    "docParams": [
      "message",
      "dirty"
    ]
  },
  {
    "name": "Component#setValueAt",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2203,
        "line": "  /**"
      },
      {
        "lineNumber": 2204,
        "line": "   * Set the value at a specific index."
      },
      {
        "lineNumber": 2205,
        "line": "   *"
      },
      {
        "lineNumber": 2206,
        "line": "   * @param index"
      },
      {
        "lineNumber": 2207,
        "line": "   * @param value"
      },
      {
        "lineNumber": 2208,
        "line": "   */"
      },
      {
        "lineNumber": 2209,
        "line": "  setValueAt(index, value, flags = {}) {"
      }
    ],
    "codeParams": [
      "index",
      "value",
      "flags"
    ],
    "docParams": [
      "index",
      "value"
    ]
  },
  {
    "name": "Component#updateComponentValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2265,
        "line": "  /**"
      },
      {
        "lineNumber": 2266,
        "line": "   * Update a value of this component."
      },
      {
        "lineNumber": 2267,
        "line": "   *"
      },
      {
        "lineNumber": 2268,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 2269,
        "line": "   */"
      },
      {
        "lineNumber": 2270,
        "line": "  updateComponentValue(value, flags = {}) {"
      }
    ],
    "codeParams": [
      "value",
      "flags"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "Component#updateOnChange",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2338,
        "line": "  /**"
      },
      {
        "lineNumber": 2339,
        "line": "   * Update the value on change."
      },
      {
        "lineNumber": 2340,
        "line": "   *"
      },
      {
        "lineNumber": 2341,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 2342,
        "line": "   */"
      },
      {
        "lineNumber": 2343,
        "line": "  updateOnChange(flags = {}, changed = false) {"
      }
    ],
    "codeParams": [
      "flags",
      "changed"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "Component#convertNumberOrBoolToString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2351,
        "line": "  /**"
      },
      {
        "lineNumber": 2352,
        "line": "   * Perform a calculated value operation."
      },
      {
        "lineNumber": 2353,
        "line": "   *"
      },
      {
        "lineNumber": 2354,
        "line": "   * @param data - The global data object."
      },
      {
        "lineNumber": 2355,
        "line": "   *"
      },
      {
        "lineNumber": 2356,
        "line": "   * @return {boolean} - If the value changed during calculation."
      },
      {
        "lineNumber": 2357,
        "line": "   */"
      },
      {
        "lineNumber": 2358,
        "line": ""
      },
      {
        "lineNumber": 2359,
        "line": "  convertNumberOrBoolToString(value) {"
      }
    ],
    "codeParams": [
      "value"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#calculateValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2433,
        "line": "  /**"
      },
      {
        "lineNumber": 2434,
        "line": "   * Performs calculations in this component plus any child components."
      },
      {
        "lineNumber": 2435,
        "line": "   *"
      },
      {
        "lineNumber": 2436,
        "line": "   * @param args"
      },
      {
        "lineNumber": 2437,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 2438,
        "line": "   */"
      },
      {
        "lineNumber": 2439,
        "line": "  calculateValue(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#invalidMessage",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2474,
        "line": "  /**"
      },
      {
        "lineNumber": 2475,
        "line": "   * Returns the invalid message, or empty string if the component is valid."
      },
      {
        "lineNumber": 2476,
        "line": "   *"
      },
      {
        "lineNumber": 2477,
        "line": "   * @param data"
      },
      {
        "lineNumber": 2478,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 2479,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 2480,
        "line": "   */"
      },
      {
        "lineNumber": 2481,
        "line": "  invalidMessage(data, dirty, ignoreCondition, row) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "ignoreCondition",
      "row"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "Component#checkComponentValidity",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2521,
        "line": "  /**"
      },
      {
        "lineNumber": 2522,
        "line": "   * Checks the validity of this component and sets the error message if it is invalid."
      },
      {
        "lineNumber": 2523,
        "line": "   *"
      },
      {
        "lineNumber": 2524,
        "line": "   * @param data"
      },
      {
        "lineNumber": 2525,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 2526,
        "line": "   * @param row"
      },
      {
        "lineNumber": 2527,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 2528,
        "line": "   */"
      },
      {
        "lineNumber": 2529,
        "line": "  checkComponentValidity(data, dirty, row, options = {}) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "row",
      "options"
    ],
    "docParams": [
      "data",
      "dirty",
      "row"
    ]
  },
  {
    "name": "Component#checkData",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2555,
        "line": "  /**"
      },
      {
        "lineNumber": 2556,
        "line": "   * Check the conditions, calculations, and validity of a single component and triggers an update if"
      },
      {
        "lineNumber": 2557,
        "line": "   * something changed."
      },
      {
        "lineNumber": 2558,
        "line": "   *"
      },
      {
        "lineNumber": 2559,
        "line": "   * @param data - The root data of the change event."
      },
      {
        "lineNumber": 2560,
        "line": "   * @param flags - The flags from this change event."
      },
      {
        "lineNumber": 2561,
        "line": "   *"
      },
      {
        "lineNumber": 2562,
        "line": "   * @return boolean - If component is valid or not."
      },
      {
        "lineNumber": 2563,
        "line": "   */"
      },
      {
        "lineNumber": 2564,
        "line": "  checkData(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "data",
      "flags"
    ]
  },
  {
    "name": "NestedComponent#everyComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "  /**"
      },
      {
        "lineNumber": 142,
        "line": "   * Perform a deep iteration over every component, including those"
      },
      {
        "lineNumber": 143,
        "line": "   * within other container based components."
      },
      {
        "lineNumber": 144,
        "line": "   *"
      },
      {
        "lineNumber": 145,
        "line": "   * @param {function} fn - Called for every component."
      },
      {
        "lineNumber": 146,
        "line": "   */"
      },
      {
        "lineNumber": 147,
        "line": "  everyComponent(fn, options) {"
      }
    ],
    "codeParams": [
      "fn",
      "options"
    ],
    "docParams": [
      "fn"
    ]
  },
  {
    "name": "NestedComponent#getComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 198,
        "line": "  /**"
      },
      {
        "lineNumber": 199,
        "line": "   * Returns a component provided a key. This performs a deep search within the"
      },
      {
        "lineNumber": 200,
        "line": "   * component tree."
      },
      {
        "lineNumber": 201,
        "line": "   *"
      },
      {
        "lineNumber": 202,
        "line": "   * @param {string} key - The key of the component to retrieve."
      },
      {
        "lineNumber": 203,
        "line": "   * @param {function} fn - Called with the component once found."
      },
      {
        "lineNumber": 204,
        "line": "   * @return {Object} - The component that is located."
      },
      {
        "lineNumber": 205,
        "line": "   */"
      },
      {
        "lineNumber": 206,
        "line": "  getComponent(path, fn, originalPath) {"
      }
    ],
    "codeParams": [
      "path",
      "fn",
      "originalPath"
    ],
    "docParams": [
      "key",
      "fn"
    ]
  },
  {
    "name": "NestedComponent#createComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 283,
        "line": "  /**"
      },
      {
        "lineNumber": 284,
        "line": "   * Create a new component and add it to the components array."
      },
      {
        "lineNumber": 285,
        "line": "   *"
      },
      {
        "lineNumber": 286,
        "line": "   * @param component"
      },
      {
        "lineNumber": 287,
        "line": "   * @param data"
      },
      {
        "lineNumber": 288,
        "line": "   */"
      },
      {
        "lineNumber": 289,
        "line": "  createComponent(component, options, data, before) {"
      }
    ],
    "codeParams": [
      "component",
      "options",
      "data",
      "before"
    ],
    "docParams": [
      "component",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponents",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 350,
        "line": "  /**"
      },
      {
        "lineNumber": 351,
        "line": "   *"
      },
      {
        "lineNumber": 352,
        "line": "   * @param element"
      },
      {
        "lineNumber": 353,
        "line": "   * @param data"
      },
      {
        "lineNumber": 354,
        "line": "   */"
      },
      {
        "lineNumber": 355,
        "line": "  addComponents(data, options) {"
      }
    ],
    "codeParams": [
      "data",
      "options"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 367,
        "line": "  /**"
      },
      {
        "lineNumber": 368,
        "line": "   * Add a new component to the components array."
      },
      {
        "lineNumber": 369,
        "line": "   *"
      },
      {
        "lineNumber": 370,
        "line": "   * @param {Object} component - The component JSON schema to add."
      },
      {
        "lineNumber": 371,
        "line": "   * @param {Object} data - The submission data object to house the data for this component."
      },
      {
        "lineNumber": 372,
        "line": "   * @param {HTMLElement} before - A DOM element to insert this element before."
      },
      {
        "lineNumber": 373,
        "line": "   * @return {Component} - The created component instance."
      },
      {
        "lineNumber": 374,
        "line": "   */"
      },
      {
        "lineNumber": 375,
        "line": "  addComponent(component, data, before, noAdd) {"
      }
    ],
    "codeParams": [
      "component",
      "data",
      "before",
      "noAdd"
    ],
    "docParams": [
      "component",
      "data",
      "before"
    ]
  },
  {
    "name": "DataGridComponent#checkValidity",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 405,
        "line": "  /**"
      },
      {
        "lineNumber": 406,
        "line": "   * Checks the validity of this datagrid."
      },
      {
        "lineNumber": 407,
        "line": "   *"
      },
      {
        "lineNumber": 408,
        "line": "   * @param data"
      },
      {
        "lineNumber": 409,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 410,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 411,
        "line": "   */"
      },
      {
        "lineNumber": 412,
        "line": "  checkValidity(data, dirty, row, silentCheck) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "row",
      "silentCheck"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "SelectComponent#addOption",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 189,
        "line": "  /**"
      },
      {
        "lineNumber": 190,
        "line": "   * Adds an option to the select dropdown."
      },
      {
        "lineNumber": 191,
        "line": "   *"
      },
      {
        "lineNumber": 192,
        "line": "   * @param value"
      },
      {
        "lineNumber": 193,
        "line": "   * @param label"
      },
      {
        "lineNumber": 194,
        "line": "   */"
      },
      {
        "lineNumber": 195,
        "line": "  addOption(value, label, attrs = {}, id) {"
      }
    ],
    "codeParams": [
      "value",
      "label",
      "attrs",
      "id"
    ],
    "docParams": [
      "value",
      "label"
    ]
  },
  {
    "name": "SelectComponent#addCurrentChoices",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 1000,
        "line": "  /**"
      },
      {
        "lineNumber": 1001,
        "line": "   * @param {*} value"
      },
      {
        "lineNumber": 1002,
        "line": "   * @param {Array} items"
      },
      {
        "lineNumber": 1003,
        "line": "   */"
      },
      {
        "lineNumber": 1004,
        "line": "  addCurrentChoices(values, items, keyValue) {"
      }
    ],
    "codeParams": [
      "values",
      "items",
      "keyValue"
    ],
    "docParams": [
      "value",
      "items"
    ]
  },
  {
    "name": "TextAreaComponent#updateEditorValue",
    "filePath": "src/components/textarea/TextArea.js",
    "lines": [
      {
        "lineNumber": 85,
        "line": "  /**"
      },
      {
        "lineNumber": 86,
        "line": "   * Updates the editor value."
      },
      {
        "lineNumber": 87,
        "line": "   *"
      },
      {
        "lineNumber": 88,
        "line": "   * @param newValue"
      },
      {
        "lineNumber": 89,
        "line": "   */"
      },
      {
        "lineNumber": 90,
        "line": "  updateEditorValue(index, newValue) {"
      }
    ],
    "codeParams": [
      "index",
      "newValue"
    ],
    "docParams": [
      "newValue"
    ]
  },
  {
    "name": "checkInvalidDate",
    "filePath": "src/utils/calendarUtils.js",
    "lines": [
      {
        "lineNumber": 71,
        "line": "/**"
      },
      {
        "lineNumber": 72,
        "line": " * Checks the entered date for validity."
      },
      {
        "lineNumber": 73,
        "line": " *"
      },
      {
        "lineNumber": 74,
        "line": " * @param {String} value"
      },
      {
        "lineNumber": 75,
        "line": " *   The value to check."
      },
      {
        "lineNumber": 76,
        "line": " * @param {[String]} format"
      },
      {
        "lineNumber": 77,
        "line": " *   A moment formats."
      },
      {
        "lineNumber": 78,
        "line": " * @param {Date} maxDate"
      },
      {
        "lineNumber": 79,
        "line": " *   The max date."
      },
      {
        "lineNumber": 80,
        "line": " * @param {Date} minDate"
      },
      {
        "lineNumber": 81,
        "line": " *   The min date."
      },
      {
        "lineNumber": 82,
        "line": " * * @return {{message: string, result: boolean}}"
      },
      {
        "lineNumber": 83,
        "line": " */"
      },
      {
        "lineNumber": 84,
        "line": "export function checkInvalidDate(value, format, minDate, maxDate) {"
      }
    ],
    "codeParams": [
      "value",
      "format",
      "minDate",
      "maxDate"
    ],
    "docParams": [
      "value",
      "format",
      "maxDate",
      "minDate"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "/**"
      },
      {
        "lineNumber": 142,
        "line": " * Get a component by its key"
      },
      {
        "lineNumber": 143,
        "line": " *"
      },
      {
        "lineNumber": 144,
        "line": " * @param {Object} components"
      },
      {
        "lineNumber": 145,
        "line": " *   The components to iterate."
      },
      {
        "lineNumber": 146,
        "line": " * @param {String|Object} key"
      },
      {
        "lineNumber": 147,
        "line": " *   The key of the component to get, or a query of the component to search."
      },
      {
        "lineNumber": 148,
        "line": " *"
      },
      {
        "lineNumber": 149,
        "line": " * @returns {Object}"
      },
      {
        "lineNumber": 150,
        "line": " *   The component that matches the given key, or undefined if not found."
      },
      {
        "lineNumber": 151,
        "line": " */"
      },
      {
        "lineNumber": 152,
        "line": "export function getComponent(components, key, includeAll) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "findComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 192,
        "line": "/**"
      },
      {
        "lineNumber": 193,
        "line": " * This function will find a component in a form and return the component AND THE PATH to the component in the form."
      },
      {
        "lineNumber": 194,
        "line": " * Path to the component is stored as an array of nested components and their indexes.The Path is being filled recursively"
      },
      {
        "lineNumber": 195,
        "line": " * when you iterating through the nested structure."
      },
      {
        "lineNumber": 196,
        "line": " * If the component is not found the callback won't be called and function won't return anything."
      },
      {
        "lineNumber": 197,
        "line": " *"
      },
      {
        "lineNumber": 198,
        "line": " * @param components"
      },
      {
        "lineNumber": 199,
        "line": " * @param key"
      },
      {
        "lineNumber": 200,
        "line": " * @param fn"
      },
      {
        "lineNumber": 201,
        "line": " * @param path"
      },
      {
        "lineNumber": 202,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 203,
        "line": " */"
      },
      {
        "lineNumber": 204,
        "line": "export function findComponent(components, key, path, fn) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "path",
      "fn"
    ],
    "docParams": [
      "components",
      "key",
      "fn",
      "path"
    ]
  },
  {
    "name": "evaluate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 39,
        "line": "/**"
      },
      {
        "lineNumber": 40,
        "line": " * Evaluate a method."
      },
      {
        "lineNumber": 41,
        "line": " *"
      },
      {
        "lineNumber": 42,
        "line": " * @param func"
      },
      {
        "lineNumber": 43,
        "line": " * @param args"
      },
      {
        "lineNumber": 44,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 45,
        "line": " */"
      },
      {
        "lineNumber": 46,
        "line": "export function evaluate(func, args, ret, tokenize) {"
      }
    ],
    "codeParams": [
      "func",
      "args",
      "ret",
      "tokenize"
    ],
    "docParams": [
      "func",
      "args"
    ]
  },
  {
    "name": "checkCalculated",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 170,
        "line": "/**"
      },
      {
        "lineNumber": 171,
        "line": " * Checks the calculated value for a provided component and data."
      },
      {
        "lineNumber": 172,
        "line": " *"
      },
      {
        "lineNumber": 173,
        "line": " * @param {Object} component"
      },
      {
        "lineNumber": 174,
        "line": " *   The component to check for the calculated value."
      },
      {
        "lineNumber": 175,
        "line": " * @param {Object} submission"
      },
      {
        "lineNumber": 176,
        "line": " *   A submission object."
      },
      {
        "lineNumber": 177,
        "line": " * @param data"
      },
      {
        "lineNumber": 178,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 179,
        "line": " */"
      },
      {
        "lineNumber": 180,
        "line": "export function checkCalculated(component, submission, rowData) {"
      }
    ],
    "codeParams": [
      "component",
      "submission",
      "rowData"
    ],
    "docParams": [
      "component",
      "submission",
      "data"
    ]
  },
  {
    "name": "checkSimpleConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 193,
        "line": "/**"
      },
      {
        "lineNumber": 194,
        "line": " * Check if a simple conditional evaluates to true."
      },
      {
        "lineNumber": 195,
        "line": " *"
      },
      {
        "lineNumber": 196,
        "line": " * @param condition"
      },
      {
        "lineNumber": 197,
        "line": " * @param condition"
      },
      {
        "lineNumber": 198,
        "line": " * @param row"
      },
      {
        "lineNumber": 199,
        "line": " * @param data"
      },
      {
        "lineNumber": 200,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 201,
        "line": " */"
      },
      {
        "lineNumber": 202,
        "line": "export function checkSimpleConditional(component, condition, row, data) {"
      }
    ],
    "codeParams": [
      "component",
      "condition",
      "row",
      "data"
    ],
    "docParams": [
      "condition",
      "condition",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCustomConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 230,
        "line": "/**"
      },
      {
        "lineNumber": 231,
        "line": " * Check custom javascript conditional."
      },
      {
        "lineNumber": 232,
        "line": " *"
      },
      {
        "lineNumber": 233,
        "line": " * @param component"
      },
      {
        "lineNumber": 234,
        "line": " * @param custom"
      },
      {
        "lineNumber": 235,
        "line": " * @param row"
      },
      {
        "lineNumber": 236,
        "line": " * @param data"
      },
      {
        "lineNumber": 237,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 238,
        "line": " */"
      },
      {
        "lineNumber": 239,
        "line": "export function checkCustomConditional(component, custom, row, data, form, variable, onError, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "custom",
      "row",
      "data",
      "form",
      "variable",
      "onError",
      "instance"
    ],
    "docParams": [
      "component",
      "custom",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCondition",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 267,
        "line": "/**"
      },
      {
        "lineNumber": 268,
        "line": " * Checks the conditions for a provided component and data."
      },
      {
        "lineNumber": 269,
        "line": " *"
      },
      {
        "lineNumber": 270,
        "line": " * @param component"
      },
      {
        "lineNumber": 271,
        "line": " *   The component to check for the condition."
      },
      {
        "lineNumber": 272,
        "line": " * @param row"
      },
      {
        "lineNumber": 273,
        "line": " *   The data within a row"
      },
      {
        "lineNumber": 274,
        "line": " * @param data"
      },
      {
        "lineNumber": 275,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 276,
        "line": " *"
      },
      {
        "lineNumber": 277,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 278,
        "line": " */"
      },
      {
        "lineNumber": 279,
        "line": "export function checkCondition(component, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "row",
      "data"
    ]
  },
  {
    "name": "checkTrigger",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 294,
        "line": "/**"
      },
      {
        "lineNumber": 295,
        "line": " * Test a trigger on a component."
      },
      {
        "lineNumber": 296,
        "line": " *"
      },
      {
        "lineNumber": 297,
        "line": " * @param component"
      },
      {
        "lineNumber": 298,
        "line": " * @param action"
      },
      {
        "lineNumber": 299,
        "line": " * @param data"
      },
      {
        "lineNumber": 300,
        "line": " * @param row"
      },
      {
        "lineNumber": 301,
        "line": " * @returns {mixed}"
      },
      {
        "lineNumber": 302,
        "line": " */"
      },
      {
        "lineNumber": 303,
        "line": "export function checkTrigger(component, trigger, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "trigger",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "action",
      "data",
      "row"
    ]
  },
  {
    "name": "delay",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 881,
        "line": "/**"
      },
      {
        "lineNumber": 882,
        "line": " * Delays function execution with possibility to execute function synchronously or cancel it."
      },
      {
        "lineNumber": 883,
        "line": " *"
      },
      {
        "lineNumber": 884,
        "line": " * @param fn Function to delay"
      },
      {
        "lineNumber": 885,
        "line": " * @param delay Delay time"
      },
      {
        "lineNumber": 886,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 887,
        "line": " */"
      },
      {
        "lineNumber": 888,
        "line": "export function delay(fn, delay = 0, ...args) {"
      }
    ],
    "codeParams": [
      "fn",
      "delay",
      "args"
    ],
    "docParams": [
      "fn",
      "delay"
    ]
  },
  {
    "name": "unfold",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 955,
        "line": "/**"
      },
      {
        "lineNumber": 956,
        "line": " * Retrun provided argument."
      },
      {
        "lineNumber": 957,
        "line": " * If argument is a function, returns the result of a function call."
      },
      {
        "lineNumber": 958,
        "line": " * @param {*} e;"
      },
      {
        "lineNumber": 959,
        "line": " *"
      },
      {
        "lineNumber": 960,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 961,
        "line": " */"
      },
      {
        "lineNumber": 962,
        "line": "export function unfold(e) {"
      }
    ],
    "codeParams": [
      "e"
    ],
    "docParams": [
      "e;"
    ]
  },
  {
    "name": "sanitize",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 1045,
        "line": "/**"
      },
      {
        "lineNumber": 1046,
        "line": " * Sanitize an html string."
      },
      {
        "lineNumber": 1047,
        "line": " *"
      },
      {
        "lineNumber": 1048,
        "line": " * @param string"
      },
      {
        "lineNumber": 1049,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 1050,
        "line": " */"
      },
      {
        "lineNumber": 1051,
        "line": "export function sanitize(string, options) {"
      }
    ],
    "codeParams": [
      "string",
      "options"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "ValidationChecker#checkValidations",
    "filePath": "src/validator/Validator.js",
    "lines": [
      {
        "lineNumber": 923,
        "line": "  /**"
      },
      {
        "lineNumber": 924,
        "line": "   * Use the new validations engine to evaluate any errors."
      },
      {
        "lineNumber": 925,
        "line": "   *"
      },
      {
        "lineNumber": 926,
        "line": "   * @param component"
      },
      {
        "lineNumber": 927,
        "line": "   * @param validations"
      },
      {
        "lineNumber": 928,
        "line": "   * @param data"
      },
      {
        "lineNumber": 929,
        "line": "   * @param row"
      },
      {
        "lineNumber": 930,
        "line": "   * @param values"
      },
      {
        "lineNumber": 931,
        "line": "   * @returns {any[]}"
      },
      {
        "lineNumber": 932,
        "line": "   */"
      },
      {
        "lineNumber": 933,
        "line": "  checkValidations(component, validations, data, row, values, async) {"
      }
    ],
    "codeParams": [
      "component",
      "validations",
      "data",
      "row",
      "values",
      "async"
    ],
    "docParams": [
      "component",
      "validations",
      "data",
      "row",
      "values"
    ]
  }
]